import type { Metadata } from "next";
import { Geist, Geist_Mono, Poppins,Noto_Naskh_Arabic,Noto_Kufi_Arabic } from "next/font/google";
import "./globals.css";
import ToastContainer from "@/components/AlertMessages/Toast";
import ReactQueryProvider from "@/components/react-query-provider";
import { AuthCheck } from "@/components/authprovider";
import { getLocale, getMessages } from "next-intl/server";
import { NextIntlClientProvider } from "next-intl";
import { routing } from "@/i18n/routing";
import { notFound } from "next/navigation";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});
const poppins = Poppins({
  subsets: ["latin"],
  weight: ["400", "500", "600", "700"], // Specify weights you need
  variable: "--font-poppins",
});
const notoNaskhArabic = Noto_Naskh_Arabic({
  subsets: ["arabic"],
  weight: ["400", "500", "600", "700"], // Specify weights you need
  variable: "--font-noto-naskh-arabic",
});
const notoKufiArabic = Noto_Kufi_Arabic({
  subsets: ["arabic"],
  weight: ["400", "500", "600", "700"], // Specify weights you need
  variable: "--font-noto-kufi-arabic",
});


export const metadata: Metadata = {
  title: "K7 Knowledge Organizer",
  description: "Generated by create next app",
};

export default async function RootLayout({
  children,
  params,
}: Readonly<{
  children: React.ReactNode;
  params: Promise<{ locale: string }>;
}>) {
  // Ensure that the incoming `locale` is valid
  const { locale } = await params;
  if (!routing.locales.includes(locale as any)) {
    notFound();
  }

  // Providing all messages to the client
  // side is the easiest way to get started
  const messages = await getMessages();

  return (
    <html lang={locale}>
      <body
        className={`${geistSans.variable} ${geistMono.variable} ${poppins.variable} ${notoNaskhArabic.variable} ${notoKufiArabic.variable} antialiased`}
      >
        <ToastContainer />
        <ReactQueryProvider>
          <AuthCheck>
            <NextIntlClientProvider messages={messages}>
              {children}
            </NextIntlClientProvider>
          </AuthCheck>
        </ReactQueryProvider>
      </body>
    </html>
  );
}
